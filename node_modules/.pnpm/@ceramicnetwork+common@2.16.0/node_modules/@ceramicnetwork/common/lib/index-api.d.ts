import type { StreamID } from '@ceramicnetwork/streamid';
import type { StreamState } from './stream.js';
export declare type ForwardPagination = {
    first: number;
    after?: string;
};
export declare type BackwardPagination = {
    last: number;
    before?: string;
};
export declare type Pagination = ForwardPagination | BackwardPagination;
export declare type BaseQuery = {
    model: StreamID | string;
    account?: string;
    filter?: Record<string, string>;
};
export declare type PaginationQuery = BaseQuery & Pagination;
export interface IndexApi {
    count(query: BaseQuery): Promise<number>;
    query(query: PaginationQuery): Promise<Page<StreamState | null>>;
}
export declare type Edge<T> = {
    cursor: string;
    node: T;
};
export interface Page<T> {
    readonly edges: Array<Edge<T>>;
    readonly pageInfo: PageInfo;
}
export declare type PageInfo = {
    readonly hasNextPage: boolean;
    readonly hasPreviousPage: boolean;
    readonly startCursor?: string;
    readonly endCursor?: string;
};
//# sourceMappingURL=index-api.d.ts.map