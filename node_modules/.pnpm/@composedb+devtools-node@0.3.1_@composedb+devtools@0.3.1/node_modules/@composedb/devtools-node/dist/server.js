import { CeramicClient } from '@ceramicnetwork/http-client';
import { Context, createGraphQLSchema } from '@composedb/client';
import express from 'express';
import { graphqlHTTP } from 'express-graphql';
import getPort from 'get-port';
import { readEncodedComposite } from './fs.js';
/**
 * Create a local GraphQL server to interact with a runtime composite definition.
 */ export async function serveGraphQL(params) {
    const { ceramicURL , definition , readonly , did , graphiql , port  } = params;
    const ceramic = new CeramicClient(ceramicURL);
    if (did != null) {
        ceramic.did = did;
    }
    const app = express();
    app.use('/graphql', // eslint-disable-next-line @typescript-eslint/no-misused-promises
    graphqlHTTP({
        context: new Context({
            ceramic
        }),
        schema: createGraphQLSchema({
            definition,
            readonly
        }),
        graphiql
    }));
    const serverPort = await getPort({
        port
    });
    return await new Promise((resolve, reject)=>{
        const server = app.listen(serverPort, ()=>{
            const handler = {
                url: `http://localhost:${serverPort}/graphql`,
                stop: (callback)=>{
                    server.close(callback);
                }
            };
            resolve(handler);
        });
        server.once('error', reject);
    });
}
/**
 * Create a local GraphQL server to interact with an encoded composite definition.
 */ export async function serveEncodedDefinition(params) {
    const { path , ...rest } = params;
    const composite = await readEncodedComposite(params.ceramicURL, path);
    return await serveGraphQL({
        ...rest,
        definition: composite.toRuntime()
    });
}
