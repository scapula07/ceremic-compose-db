import type { RuntimeCompositeDefinition } from '@composedb/types';
import type { DID } from 'dids';
import type { PathInput } from './types.js';
export declare type ServerHandler = {
    /**
     * URL of the local GraphQL endpoint.
     */
    url: string;
    /**
     * Stop the server.
     */
    stop: (callback?: (err?: Error | undefined) => void) => void;
};
export declare type ServeParams = {
    /**
     * URL of the Ceramic node.
     */
    ceramicURL: string;
    /**
     * Optional DID instance attached to the Ceramic client.
     */
    did?: DID;
    /**
     * Enable GraphiQL on the server.
     */
    graphiql?: boolean;
    /**
     * Port to use, if available.
     */
    port?: number | Array<number>;
};
export declare type ServeDefinitionParams = ServeParams & {
    /**
     * Path of the encoded composite definition used to generate the GraphQL schema.
     */
    path: PathInput;
};
export declare type ServeGraphQLParams = ServeParams & {
    /**
     * Runtime composite definition used to generate the GraphQL schema.
     */
    definition: RuntimeCompositeDefinition;
    readonly?: boolean;
};
/**
 * Create a local GraphQL server to interact with a runtime composite definition.
 */
export declare function serveGraphQL(params: ServeGraphQLParams): Promise<ServerHandler>;
/**
 * Create a local GraphQL server to interact with an encoded composite definition.
 */
export declare function serveEncodedDefinition(params: ServeDefinitionParams): Promise<ServerHandler>;
