/**
 * Common types used by ComposeDB packages.
 *
 * @module types
 */
import type { ModelAccountRelation, ModelDefinition, ModelViewsDefinition } from '@ceramicnetwork/stream-model';
import type { DagJWSResult, JWSSignature } from 'dids';
export type { Model, ModelDefinition } from '@ceramicnetwork/stream-model';
export type { ModelInstanceDocument } from '@ceramicnetwork/stream-model-instance';
export type { JSONSchema } from 'json-schema-typed/draft-2020-12';
/** JSON-encoded DAG-JWS. */
export declare type EncodedDagJWS = {
    payload: string;
    signatures: Array<JWSSignature>;
    link?: string;
};
/** JSON-encoded DAG-JWS result representing a Ceramic stream commit. */
export declare type EncodedDagJWSResult = {
    jws: EncodedDagJWS;
    linkedBlock: string;
};
/** Ceramic stream commits for a given stream. */
export declare type StreamCommits = Array<DagJWSResult>;
/** JSON-encoded Ceramic stream commits for a given stream. */
export declare type EncodedStreamCommits = Array<EncodedDagJWSResult>;
/** Composite-level views definition. */
export declare type CompositeViewsDefinition = {
    account?: Record<string, unknown>;
    root?: Record<string, unknown>;
    models?: Record<string, ModelViewsDefinition>;
};
/**
 * Composite definition type factory, used both for encoded and internal composites definitions.
 */
export declare type CompositeDefinitionType<T> = {
    /**
     * Version of the composite format.
     */
    version: string;
    /**
     * Models defined in the composite, keyed by stream ID.
     */
    models: Record<string, T>;
    /**
     * Optional mapping of model stream ID to alias name.
     */
    aliases?: Record<string, string>;
    /**
     * Optional composite-level views.
     */
    views?: CompositeViewsDefinition;
    /**
     * Optional common embeds (enums and objects) shared by models in the composite.
     */
    commonEmbeds?: Array<string>;
};
/**
 * Composite definition used internally by the {@linkcode devtools.Composite Composite}
 * development tools.
 */
export declare type InternalCompositeDefinition = CompositeDefinitionType<ModelDefinition>;
/** JSON-encoded composite definition. */
export declare type EncodedCompositeDefinition = CompositeDefinitionType<EncodedStreamCommits>;
/** Common runtime scalar properties. */
export declare type RuntimeScalarCommon = {
    required: boolean;
};
/** Runtime scalar representation for a boolean. */
export declare type RuntimeBooleanScalar = RuntimeScalarCommon & {
    type: 'boolean';
};
/** Runtime scalar representation for an integer. */
export declare type RuntimeIntegerScalar = RuntimeScalarCommon & {
    type: 'integer';
};
/** Runtime scalar representation for a float. */
export declare type RuntimeFloatScalar = RuntimeScalarCommon & {
    type: 'float';
};
/** Runtime scalar representation for a string. */
export declare type RuntimeStringScalar = RuntimeScalarCommon & {
    type: 'string';
    maxLength?: number;
};
/** Ceramic-specific runtime scalar types. */
export declare type CustomRuntimeScalarType = 'commitid' | 'countrycode' | 'date' | 'datetime' | 'did' | 'id' | 'streamid' | 'time';
declare type RuntimeStringScalarType<Type extends CustomRuntimeScalarType> = RuntimeScalarCommon & {
    type: Type;
    maxLength?: number;
};
/** Runtime scalar representations. */
export declare type RuntimeScalar = RuntimeBooleanScalar | RuntimeIntegerScalar | RuntimeFloatScalar | RuntimeStringScalar | RuntimeStringScalarType<CustomRuntimeScalarType>;
/** Runtime scalar types. */
export declare type RuntimeScalarType = RuntimeScalar['type'];
/** Runtime references types. */
export declare type RuntimeReferenceType = 'connection' | 'enum' | 'node' | 'object';
/** Runtime reference representation. */
export declare type RuntimeReference<T extends RuntimeReferenceType = RuntimeReferenceType> = RuntimeScalarCommon & {
    type: 'reference';
    refType: T;
    refName: string;
};
/** Runtime list representation. */
export declare type RuntimeList = RuntimeScalarCommon & {
    type: 'list';
    item: RuntimeScalar | RuntimeReference<'enum' | 'object'>;
};
/** Runtime meta types. */
export declare type RuntimeMetaType = 'objectType';
/** Runtime meta field representation. */
export declare type RuntimeMetaField = {
    type: 'meta';
    metaType: RuntimeMetaType;
};
/** Runtime relation source. */
export declare type RuntimeRelationSource = 'document' | 'queryConnection' | 'queryCount';
/** Runtime relation field representation. */
export declare type RuntimeRelation = {
    source: RuntimeRelationSource;
    model: string;
    property: string;
};
/** Runtime view types. */
export declare type RuntimeViewType = 'documentAccount' | 'documentVersion';
/** Runtime view field representation. */
export declare type RuntimeViewField = {
    type: 'view';
    viewType: 'relation';
    relation: RuntimeRelation;
} | {
    type: 'view';
    viewType: RuntimeViewType;
};
/**Runtime object fields representations. */
export declare type RuntimeObjectField = RuntimeScalar | RuntimeList | RuntimeReference | RuntimeMetaField | RuntimeViewField;
/** Runtime object property name to field representation mapping. */
export declare type RuntimeObjectFields = Record<string, RuntimeObjectField>;
/** Runtime views types. */
export declare type RuntimeViewReferenceType = 'connection' | 'node';
/** Runtime view reference representation. */
export declare type RuntimeViewReference = {
    type: RuntimeViewReferenceType;
    name: string;
};
/** Runtime model information. */
export declare type RuntimeModel = {
    id: string;
    accountRelation: ModelAccountRelation;
};
/**
 * Runtime composite definition, used by the {@linkcode client.ComposeClient ComposeClient class} to
 * create a GraphQL schema to interact with.
 */
export declare type RuntimeCompositeDefinition = {
    /**
     * Models names to stream IDs mapping.
     */
    models: Record<string, RuntimeModel>;
    /**
     * Objects structures, keyed by name.
     */
    objects: Record<string, RuntimeObjectFields>;
    /**
     * String enums, keyed by name.
     */
    enums: Record<string, Array<string>>;
    /**
     * Account-based relations.
     */
    accountData: Record<string, RuntimeViewReference>;
    /**
     * Optional query-level entry-points.
     */
    query?: Record<string, RuntimeViewReference>;
};
