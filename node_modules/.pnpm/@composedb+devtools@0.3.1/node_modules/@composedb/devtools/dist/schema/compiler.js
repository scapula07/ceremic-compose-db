function _checkPrivateRedeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
        throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
}
function _classApplyDescriptorGet(receiver, descriptor) {
    if (descriptor.get) {
        return descriptor.get.call(receiver);
    }
    return descriptor.value;
}
function _classApplyDescriptorSet(receiver, descriptor, value) {
    if (descriptor.set) {
        descriptor.set.call(receiver, value);
    } else {
        if (!descriptor.writable) {
            throw new TypeError("attempted to set read only private field");
        }
        descriptor.value = value;
    }
}
function _classExtractFieldDescriptor(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to " + action + " private field on non-instance");
    }
    return privateMap.get(receiver);
}
function _classPrivateFieldGet(receiver, privateMap) {
    var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get");
    return _classApplyDescriptorGet(receiver, descriptor);
}
function _classPrivateFieldInit(obj, privateMap, value) {
    _checkPrivateRedeclaration(obj, privateMap);
    privateMap.set(obj, value);
}
function _classPrivateFieldSet(receiver, privateMap, value) {
    var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set");
    _classApplyDescriptorSet(receiver, descriptor, value);
    return value;
}
import { DOC_ID_FIELD } from '../constants.js';
import { viewRuntimeToModel } from '../utils.js';
import { parseSchema } from './parser.js';
import { isCommonScalar } from './scalars.js';
export function createReference(name) {
    return {
        $ref: `#/$defs/${name}`
    };
}
export function extractReference(ref) {
    const name = ref.$ref.split('#/$defs/')[1];
    if (name == null || name.length === 0) {
        throw new Error(`Could not extract name from reference: ${ref.$ref}`);
    }
    return name;
}
var _def = /*#__PURE__*/ new WeakMap(), _refs = /*#__PURE__*/ new WeakMap(), _src = /*#__PURE__*/ new WeakMap();
export class SchemaCompiler {
    _getReference(name) {
        const ref = _classPrivateFieldGet(this, _refs)[name];
        if (ref == null) {
            throw new Error(`Reference ${name} does not exist`);
        }
        return ref;
    }
    _extractDefinitions(name) {
        const unref = this._getReference(name);
        const defs = {
            [name]: unref.schema
        };
        for (const subrefName of unref.refs){
            Object.assign(defs, this._extractDefinitions(subrefName));
        }
        return defs;
    }
    compile() {
        // Ensure enums are tracked in common embeds
        for (const name of Object.keys(_classPrivateFieldGet(this, _src).enums)){
            _classPrivateFieldGet(this, _def).commonEmbeds.push(name);
        }
        // Only compile embedded objects in first pass so they can be added to models in second pass
        for (const [name1, definition] of Object.entries(_classPrivateFieldGet(this, _src).objects)){
            if (_classPrivateFieldGet(this, _src).models[name1] == null) {
                this._compileEmbedObject(name1, definition);
                _classPrivateFieldGet(this, _def).commonEmbeds.push(name1);
            }
        }
        // Compile models
        for (const [name2, definition1] of Object.entries(_classPrivateFieldGet(this, _src).models)){
            const object = _classPrivateFieldGet(this, _src).objects[name2];
            if (object == null) {
                throw new Error(`Missing object definition for model: ${name2}`);
            }
            // Compile object schema with embedded references for model
            _classPrivateFieldGet(this, _def).models[name2] = this._compileModel(name2, definition1, object);
        }
        return _classPrivateFieldGet(this, _def);
    }
    _compileEmbedObject(name, definition) {
        const existing = _classPrivateFieldGet(this, _refs)[name];
        if (existing) {
            return existing;
        }
        const object = {
            type: 'object',
            title: name,
            properties: {},
            additionalProperties: false
        };
        const required = [];
        let refs = [];
        for (const [key, field] of Object.entries(definition.properties)){
            if (field.required) {
                required.push(key);
            }
            let value;
            switch(field.type){
                case 'enum':
                    value = this._compileEnum(name, key, field);
                    break;
                case 'list':
                    value = this._compileList(name, key, field);
                    break;
                case 'object':
                    value = this._compileObjectReference(name, key, field);
                    break;
                case 'scalar':
                    value = this._compileScalar(field);
                    break;
                case 'view':
                    throw new Error(`Unsupported view on field ${key} of object ${name}. Views can only be set on models.`);
            }
            if (value == null) {
                throw new Error(`Could not compile value for field ${key} of object ${name}`);
            }
            object.properties[key] = value.schema;
            refs = [
                ...refs,
                ...value.refs
            ];
        }
        if (required.length !== 0) {
            object.required = required;
        }
        const schemaWithRefs = {
            schema: object,
            refs
        };
        _classPrivateFieldGet(this, _refs)[name] = schemaWithRefs;
        return schemaWithRefs;
    }
    _compileList(objectName, fieldName, definition) {
        const list = {
            type: 'array',
            maxItems: definition.maxLength
        };
        if (definition.minLength != null) {
            list.minItems = definition.minLength;
        }
        let item;
        switch(definition.item.type){
            case 'enum':
                item = this._compileEnum(objectName, fieldName, definition.item);
                break;
            case 'object':
                item = this._compileObjectReference(objectName, fieldName, definition.item);
                break;
            case 'scalar':
                item = this._compileScalar(definition.item);
                break;
        }
        if (item == null) {
            throw new Error(`Could not compile item schema for list ${fieldName} of object ${objectName}`);
        }
        list.items = item.schema;
        return {
            schema: list,
            refs: item.refs
        };
    }
    _compileObjectReference(objectName, fieldName, definition) {
        if (_classPrivateFieldGet(this, _src).models[definition.name] != null) {
            throw new Error(`Unsupported reference to model ${definition.name} in field ${fieldName} of object ${objectName}. References can only be made to embedded objects.`);
        }
        const target = _classPrivateFieldGet(this, _src).objects[definition.name];
        if (target == null) {
            throw new Error(`Missing object ${definition.name} referenced in field ${fieldName} of object ${objectName}`);
        }
        // Ensure object is compiled and injected to definitions record
        this._compileEmbedObject(definition.name, target);
        return {
            schema: {
                $ref: `#/$defs/${definition.name}`
            },
            refs: [
                definition.name
            ]
        };
    }
    _compileEnum(objectName, fieldName, definition) {
        const values = _classPrivateFieldGet(this, _src).enums[definition.name];
        if (values == null) {
            throw new Error(`Missing enum ${definition.name} referenced in field ${fieldName} of object ${objectName}`);
        }
        if (_classPrivateFieldGet(this, _refs)[definition.name] == null) {
            _classPrivateFieldGet(this, _refs)[definition.name] = {
                schema: {
                    type: 'string',
                    title: definition.name,
                    enum: values
                },
                refs: []
            };
        }
        return {
            schema: {
                $ref: `#/$defs/${definition.name}`
            },
            refs: [
                definition.name
            ]
        };
    }
    _compileScalar(definition) {
        const title = definition.schema.title;
        // Scalars without title or that have properties changed from the defaults are injected directly as they are not reusable
        if (title == null || !isCommonScalar(definition.schema)) {
            return {
                schema: definition.schema,
                refs: []
            };
        }
        // Scalars with title are injected in definitions and referenced
        if (_classPrivateFieldGet(this, _refs)[title] == null) {
            _classPrivateFieldGet(this, _refs)[title] = {
                schema: definition.schema,
                refs: []
            };
        }
        return {
            schema: {
                $ref: `#/$defs/${title}`
            },
            refs: [
                title
            ]
        };
    }
    _compileModel(name, modelDefinition, objectDefinition) {
        if (modelDefinition.action === 'load') {
            const views = {};
            for (const [key, field] of Object.entries(objectDefinition.properties)){
                if (key === DOC_ID_FIELD) {
                    continue;
                }
                if (field.type === 'view') {
                    views[key] = viewRuntimeToModel(field);
                } else {
                    throw new Error(`Unsupported property ${key} on model ${name}, only views can be added to loaded models`);
                }
            }
            return {
                ...modelDefinition,
                views
            };
        }
        if (objectDefinition.properties[DOC_ID_FIELD] != null) {
            throw new Error(`Unsupported ${DOC_ID_FIELD} field on model ${name}, the ${DOC_ID_FIELD} field is reserved by ComposeDB`);
        }
        const views1 = {};
        const object = {
            $schema: 'https://json-schema.org/draft/2020-12/schema',
            type: 'object',
            properties: {},
            additionalProperties: false
        };
        const required = [];
        let refs = [];
        for (const [key1, field1] of Object.entries(objectDefinition.properties)){
            if (field1.required && field1.type !== 'view') {
                required.push(key1);
            }
            let value;
            switch(field1.type){
                case 'enum':
                    value = this._compileEnum(name, key1, field1);
                    break;
                case 'list':
                    value = this._compileList(name, key1, field1);
                    break;
                case 'object':
                    value = this._compileObjectReference(name, key1, field1);
                    break;
                case 'scalar':
                    value = this._compileScalar(field1);
                    break;
                case 'view':
                    {
                        views1[key1] = viewRuntimeToModel(field1);
                        break;
                    }
            }
            if (value != null) {
                object.properties[key1] = value.schema;
                refs = [
                    ...refs,
                    ...value.refs
                ];
            }
        }
        if (required.length !== 0) {
            object.required = required;
        }
        if (refs.length !== 0) {
            object.$defs = {};
            for (const refName of new Set(refs)){
                Object.assign(object.$defs, this._extractDefinitions(refName));
            }
        }
        return {
            action: 'create',
            model: {
                name,
                description: modelDefinition.description,
                // TODO: add once supported in model definition
                // interface: definition.interface,
                // implements: definition.implements,
                accountRelation: modelDefinition.accountRelation,
                schema: object,
                relations: modelDefinition.relations,
                views: views1
            }
        };
    }
    constructor(source){
        _classPrivateFieldInit(this, _def, {
            writable: true,
            value: {
                models: {},
                commonEmbeds: []
            }
        });
        _classPrivateFieldInit(this, _refs, {
            writable: true,
            value: {}
        });
        _classPrivateFieldInit(this, _src, {
            writable: true,
            value: void 0
        });
        _classPrivateFieldSet(this, _src, source);
    }
}
export function compileSchema(definition) {
    return new SchemaCompiler(definition).compile();
}
export function createAbstractCompositeDefinition(schema) {
    return compileSchema(parseSchema(schema));
}
